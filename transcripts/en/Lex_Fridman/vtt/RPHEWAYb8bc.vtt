WEBVTT

1
00:00:03.060 --> 00:00:04.690
<v 0>We at Mozilla realized this. And we,</v>

2
00:00:04.710 --> 00:00:08.160
we saw JavaScript was something that you could compile to you.

3
00:00:08.250 --> 00:00:10.530
As Adobe had somebody in the Adobe labs doing this too.

4
00:00:10.531 --> 00:00:14.100
He had a project called alchemy. We had somebody who's now at Google. Um,

5
00:00:15.170 --> 00:00:19.950
alone's a Chi who did his own LVMS compiler that would take C or C plus plus,

6
00:00:19.951 --> 00:00:22.410
and it would emit JavaScript. And you would think this is crazy.

7
00:00:22.560 --> 00:00:26.370
You're going from this sort of machine type, slow level fit, you know,

8
00:00:26.820 --> 00:00:29.580
controlled memory allocation language to this garbage collected,

9
00:00:29.610 --> 00:00:32.580
dynamically typed, uh, high level, higher level language,

10
00:00:32.940 --> 00:00:37.860
but alone sort of just phenomenologically carved nature of the joint and

11
00:00:37.861 --> 00:00:42.150
found the forms that were fast in JavaScript. And then with Dave Herman,

12
00:00:42.270 --> 00:00:46.650
who I'd recruited from North Eastern university, who was the type theorist. And,

13
00:00:46.980 --> 00:00:51.450
um, Luke Wagner is still at Mozilla, who was the compiler guy and the jet guy.

14
00:00:51.780 --> 00:00:56.190
They figured out how to codify what Alan had done into a typed

15
00:00:56.191 --> 00:00:59.250
subset of JavaScript called ASM JS.

16
00:00:59.251 --> 00:01:02.100
And this is a strange thing to think about because it doesn't have new syntax.

17
00:01:02.220 --> 00:01:06.330
The types are casts that occur in

18
00:01:06.750 --> 00:01:08.760
dominator positions in the control flow graph.

19
00:01:08.970 --> 00:01:12.720
So it's like a hack on JavaScript and it's a subset and it uses those Bitwise

20
00:01:12.721 --> 00:01:17.400
operators that I talked about copying from Java to basically cast,

21
00:01:18.030 --> 00:01:21.750
um, num numeric types. What's your double position flowing point into integers.

22
00:01:22.050 --> 00:01:26.340
And so inside JavaScript in the kernel, semantics are integers.

23
00:01:26.640 --> 00:01:29.970
And if you use these operators, if a compiler emits them in the right places,

24
00:01:30.510 --> 00:01:34.950
you can then treat them as typed values type memory locations,

25
00:01:35.280 --> 00:01:38.550
and you can type check your program and you can not only type check it.

26
00:01:38.551 --> 00:01:41.490
You can compile it. And this is all in sort of linear time. Oh,

27
00:01:41.790 --> 00:01:45.330
and you can compile it to have deterministic performance.

28
00:01:45.331 --> 00:01:46.950
It doesn't touch the garbage collector.

29
00:01:47.520 --> 00:01:51.060
It calls a bunch of functions that come from the C functions with C plus plus

30
00:01:51.061 --> 00:01:51.990
code that you're compiling.

31
00:01:52.410 --> 00:01:57.360
And you can make the Epic unreal engine go in 30

32
00:01:57.361 --> 00:02:01.770
frames a second. And when we did this in 2013 in the fall, you know,

33
00:02:01.771 --> 00:02:05.070
Tim Sweeney I'm at, um, didn't think he could be done quickly,

34
00:02:05.190 --> 00:02:08.940
that it would take years. And the team went to Raleigh to Epic.

35
00:02:09.000 --> 00:02:13.710
And in four days they had unreal engine ported by pressing a compile

36
00:02:13.711 --> 00:02:16.380
button, right? They had the, but they had to have web GL,

37
00:02:16.590 --> 00:02:19.170
which came from open shell IES came to open GL,

38
00:02:19.290 --> 00:02:22.410
which came from Silicon graphics, jail. They had to have web audio.

39
00:02:22.770 --> 00:02:24.360
So they could map open AAL,

40
00:02:24.380 --> 00:02:26.640
which was another audio library standard to web audio,

41
00:02:26.641 --> 00:02:30.160
which was kind of a Chrome idiosyncratic thing. Um, but they,

42
00:02:30.270 --> 00:02:35.040
they could make it work and they had to have ASM JS for fast C plus plus to

43
00:02:35.041 --> 00:02:39.300
JavaScript. And, uh, if you didn't have that fast compiler step,

44
00:02:40.260 --> 00:02:42.270
the JavaScript you'd write by hand,

45
00:02:42.271 --> 00:02:44.910
trying to do an unreal game would be too big and too slow. It would,

46
00:02:44.940 --> 00:02:46.290
it would touch the garbage collector.

47
00:02:46.350 --> 00:02:50.310
It will not keep up with 30 frames a second on the hardware, 2013 hardware.

48
00:02:50.490 --> 00:02:54.720
So we demo that at, at, um, uh, this must have been fall 2012.

49
00:02:54.721 --> 00:02:55.470
Now I think about it.

50
00:02:55.470 --> 00:02:59.920
Cause we demoed it at GDC again to all the conference 2013 and people were

51
00:02:59.921 --> 00:03:01.630
stunned. That's like unreal engine,

52
00:03:01.690 --> 00:03:06.220
unreal tournament running in my browser window. No, plug-in no flash,

53
00:03:06.221 --> 00:03:07.350
no Java. No.

54
00:03:07.530 --> 00:03:09.300
<v 1>So were those the early days of,</v>

55
00:03:09.360 --> 00:03:14.280
because JavaScript now is able to run basically on par with a lot of

56
00:03:14.340 --> 00:03:16.320
the like C plus plus.

57
00:03:16.590 --> 00:03:20.010
<v 0>Yeah. And even before then you had the fast JavaScript VMs in 2008,</v>

58
00:03:20.280 --> 00:03:23.580
when Chrome came out just before it came out, Mozilla,

59
00:03:23.640 --> 00:03:27.720
my friend undress gal and I, and others hacked out trace monkey.

60
00:03:27.930 --> 00:03:28.980
Our trace based jet,

61
00:03:29.370 --> 00:03:33.270
the squirrel fish extreme team at Apple did their Git.

62
00:03:33.630 --> 00:03:36.780
And we were all competing on these crazy performance benchmarks.

63
00:03:36.781 --> 00:03:38.460
It was a little bit too much tuning to the benchmark,

64
00:03:38.461 --> 00:03:41.400
but JavaScript started getting fast and developers started noticing it,

65
00:03:41.580 --> 00:03:45.480
but it was still kind of its own high-level language with garbage collection.

66
00:03:45.660 --> 00:03:49.830
The ASM JS step helped us go further because until we really

67
00:03:50.520 --> 00:03:54.270
proved the concept, people were still saying, well, JavaScript's okay.

68
00:03:54.271 --> 00:03:57.030
It's getting faster. Thanks to VA. Everybody gave Google credit,

69
00:03:57.031 --> 00:03:59.820
especially Google, but we need something to kill flash.

70
00:03:59.850 --> 00:04:03.420
Let's use the portable native client code that Google had acquired native

71
00:04:03.421 --> 00:04:07.860
client, um, which is a separate lineage for taking basically C code,

72
00:04:07.890 --> 00:04:10.080
compiling it into a software fault,

73
00:04:10.110 --> 00:04:14.250
isolated container of some sort of using some kind of virtualization technique.

74
00:04:14.670 --> 00:04:17.430
And maybe it can even be in process and still know memory say,

75
00:04:17.470 --> 00:04:19.740
that'd be awesome, but they ended up using process isolation too.

76
00:04:19.741 --> 00:04:23.430
And that kind of weakened it. And in the end it was like portable native client.

77
00:04:23.460 --> 00:04:25.950
Okay. You know, meet the new boss. Same as the old boss.

78
00:04:25.951 --> 00:04:27.420
This is the Google flash. Right.

79
00:04:28.170 --> 00:04:31.530
But when we did ASM JS and we showed unreal engine working,

80
00:04:32.100 --> 00:04:34.740
I think it was only a matter of time before Google threw in the towel.

81
00:04:34.741 --> 00:04:37.530
And in fact, everybody agreed in spring of 2015,

82
00:04:38.070 --> 00:04:42.090
we're going to take what was proven by ASM JS and make a new syntax,

83
00:04:42.091 --> 00:04:46.620
a binary syntax it's efficient that loads into the same JavaScript VM the

84
00:04:46.621 --> 00:04:49.710
JavaScript blows into. So there'll be two source languages, one VM,

85
00:04:49.711 --> 00:04:52.620
very important, one garbage collector, one memory manager,

86
00:04:52.621 --> 00:04:57.030
one set of compiler stages. Uh, and that's called web assembly.

87
00:04:57.270 --> 00:04:59.070
And that's the successor ASM JS.

88
00:04:59.370 --> 00:05:03.000
And it's important that it have binary syntax because at the end of the day,

89
00:05:03.001 --> 00:05:05.010
especially on mobile, if you're downloading JavaScript,

90
00:05:05.040 --> 00:05:07.350
even if you're using LZ compression on the wire, that's cool,

91
00:05:07.351 --> 00:05:10.500
but you've got to blow it out into memory and then parse the silly eight

92
00:05:10.501 --> 00:05:15.090
character function keyword that I picked when I should've used something

93
00:05:15.091 --> 00:05:18.450
shorter. I picked it because of all the Unix tool. Um.

94
00:05:19.440 --> 00:05:22.740
<v 1>So anyways, I'm not falling. I want to, but I'm not following the AUC thread.</v>

95
00:05:24.690 --> 00:05:29.580
Sorry. I said surprising to you that, uh, how fast JavaScript is these days.

96
00:05:29.581 --> 00:05:32.340
I mean, like you've been through the whole journey. I know every,

97
00:05:32.450 --> 00:05:37.020
every step of the way, but is it like, I mean, it's how it feels incredible.

98
00:05:37.170 --> 00:05:38.850
It does, but I knew it. So the funny thing, yeah.

99
00:05:39.140 --> 00:05:43.200
<v 0>Computer science is this big karmic wheel, right? We all for tuna. Um,</v>

100
00:05:44.040 --> 00:05:47.370
and, uh, in the Smiths, the 97,

101
00:05:47.371 --> 00:05:52.230
I was loaned by Netscape to do due diligence for sun in their

102
00:05:52.231 --> 00:05:56.820
acquisition of anamorphic, which was, uh, David Unger, uh,

103
00:05:57.350 --> 00:06:01.160
come in and friends, um, people, uh, Craig I'm forgetting his name.

104
00:06:01.161 --> 00:06:02.510
He went to Microsoft, uh,

105
00:06:02.540 --> 00:06:07.220
these Stanford language buffs who had taken smalltalk and then David create

106
00:06:07.221 --> 00:06:12.200
itself as a simpler sort of smalltalk language and may really

107
00:06:12.201 --> 00:06:17.000
fast just in time, compiling VMs for them. And they, you know,

108
00:06:17.180 --> 00:06:22.010
well ahead of Java hotspot or JavaScript V8 or any of these modern BMS

109
00:06:22.550 --> 00:06:27.470
figured out how to make dynamic code fast because smalltalk is dynamic

110
00:06:27.471 --> 00:06:31.340
language, right? It has classes that has, I think, more lockdown, declarative,

111
00:06:31.341 --> 00:06:33.410
syntax, and JavaScript, but it's fundamentally dynamic.

112
00:06:33.411 --> 00:06:35.510
You don't have declared the types. Um,

113
00:06:35.870 --> 00:06:40.160
but you could further types as the program runs and you start to form these

114
00:06:40.580 --> 00:06:44.000
ideas about what types are actually flowing through key operations.

115
00:06:44.000 --> 00:06:48.590
And you form a little tool called polymorphic inline caches that are

116
00:06:48.591 --> 00:06:52.880
optimized machine code. The cash is the machine code that assumes,

117
00:06:53.420 --> 00:06:55.820
does a quick check to make sure the type is right. And if it's not right,

118
00:06:55.821 --> 00:06:59.270
it bails to the interpreter. And if it is right, you go pretty fast.

119
00:06:59.570 --> 00:07:02.600
And that short test is a predicted branch. So things are,

120
00:07:02.930 --> 00:07:06.260
things are pretty quick, all that amazing stuff I knew about in the nineties.

121
00:07:06.380 --> 00:07:08.600
And I, I didn't have time to do it.

122
00:07:08.720 --> 00:07:12.110
And anamorphic got bought by sun and they did hotspot.

123
00:07:12.170 --> 00:07:16.820
And you needed that even in Java because at scale Java has some dynamic aspects

124
00:07:16.821 --> 00:07:19.250
due to invoke interface.

125
00:07:19.251 --> 00:07:23.630
You can have basically collections of Java code where you don't know at

126
00:07:24.220 --> 00:07:27.020
the time of each, each module or package has compiled.

127
00:07:27.590 --> 00:07:29.150
Exactly what's being called what the,

128
00:07:29.390 --> 00:07:32.420
what subclass or what implementation of an interface is being called.

129
00:07:32.750 --> 00:07:36.170
And so you want to optimize using the sort of dynamic polymorphic caching there

130
00:07:36.171 --> 00:07:39.170
too. And they did that and hotspot, it's amazing, amazing beast.

131
00:07:39.530 --> 00:07:42.970
I've met like 13 people who all claimed they created it. I think,

132
00:07:42.971 --> 00:07:47.270
I think one of the, maybe deserve credit more than others. Um, but, uh,

133
00:07:48.110 --> 00:07:49.490
I didn't get to do that in JavaScript.

134
00:07:49.610 --> 00:07:53.750
And when we knew that that Google was going to do their own browser,

135
00:07:53.751 --> 00:07:56.840
which we knew at Mozilla around 2006, um,

136
00:07:57.380 --> 00:08:01.490
I also met the team that did V8 and it turns out it was Lars Bach,

137
00:08:01.500 --> 00:08:05.000
who was one of the young engineers from anamorphic to got acquired by sun.

138
00:08:05.540 --> 00:08:06.860
And so Lars is like the,

139
00:08:06.930 --> 00:08:09.380
one of the world's expert on these kinds of virtual machines.

140
00:08:09.860 --> 00:08:11.630
And he picked my brains about JavaScript.

141
00:08:11.660 --> 00:08:15.470
I could tell he didn't like it at the time, but he had to do it. And Oh,

142
00:08:15.471 --> 00:08:18.860
really interesting. Yeah. In 2006 lunch at Google's campus. Um, and,

143
00:08:19.060 --> 00:08:22.370
and then I had other friends who was Devore at Chrome and he said, yeah,

144
00:08:22.371 --> 00:08:23.210
we don't know what they're doing.

145
00:08:23.211 --> 00:08:26.450
This is getting 2007 to fall getting towards 2008.

146
00:08:26.900 --> 00:08:27.890
We're trying to get Chrome out.

147
00:08:27.891 --> 00:08:29.390
And we don't know what's going on with the VA team.

148
00:08:29.391 --> 00:08:33.350
They're often all who's Denmark, you know, rewriting their engine four times,

149
00:08:33.470 --> 00:08:36.980
which is good. That's the right way to do this kind of development. You know,

150
00:08:37.160 --> 00:08:39.170
they were learning JavaScript, including all its quirks,

151
00:08:39.171 --> 00:08:41.870
which they came to hate the fire of a thousand suns,

152
00:08:41.900 --> 00:08:45.410
which is one of the reasons that Lars and company did dart their own language,

153
00:08:45.800 --> 00:08:50.150
but they also made the language fast. And meanwhile, we knew this was happening.

154
00:08:50.151 --> 00:08:53.390
So we got our act together with, um, trace monkey,

155
00:08:53.391 --> 00:08:56.760
our tracing jet at Mozilla and Apple, I think was also aware.

156
00:08:56.840 --> 00:09:01.020
And so they were doing their own. So the era of jetted fast JavaScript in 2008,

157
00:09:01.320 --> 00:09:05.400
had this prehistory going back to smalltalk itself and self and anamorphic.

158
00:09:05.910 --> 00:09:07.140
And the, again,

159
00:09:07.141 --> 00:09:09.810
the lineage is interesting because you had Lars and anamorphic and then he ends

160
00:09:09.811 --> 00:09:10.644
up at Google.

161
00:09:10.910 --> 00:09:15.260
<v 1>Yeah. And today we have an incredibly fast language that,</v>

162
00:09:15.261 --> 00:09:20.090
like you said, still, you know, without hate you can't have love. So,

163
00:09:20.360 --> 00:09:24.680
uh, I th I think there's both love and hate for this dance. Uh,

164
00:09:24.710 --> 00:09:27.800
this rich complex dance of JavaScript throughout us history.

