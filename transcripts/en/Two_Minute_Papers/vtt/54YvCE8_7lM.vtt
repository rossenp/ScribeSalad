WEBVTT

1
00:00:00.360 --> 00:00:04.240
<v 0>Dear fellow scholars. This is two minute papers with Dr. [inaudible]</v>

2
00:00:04.240 --> 00:00:04.240
. After reading a physics textbook on the laws of fluid motion, with a little effort, we can make a virtual world come alive. My writing a computer program that contains these laws resulting in beautiful fluid simulations. Like the one you see here, the amount of detail we can simulate with these programs is increasing every year. Not only due to the fact that hardware improves over time, but also the pace of progress in computer graphics. Research is truly remarkable to simulate all these many recent methods built on top of a technique called the material point method. This is a hybrid simulation technique that uses both particles and grids to create these beautiful animations. However, when used by itself, we can come up with a bunch of 

3
00:00:04.240 --> 00:00:04.240
phenomenon that it cannot simulate properly. One such example is cracking and 

4
00:00:04.240 --> 00:00:04.240
tiering phenomenon

5
00:00:04.240 --> 00:00:05.073
, which has been addressed in a previous paper that we covered a few videos ago.

6
00:01:02.210 --> 00:01:07.050
With this, we can smash Orioles, candy, crabs, pumpkins, and much,

7
00:01:07.140 --> 00:01:09.210
much more. In a few minutes,

8
00:01:09.480 --> 00:01:13.140
I will show you how to combine some of these aspects of a simulation.

9
00:01:13.560 --> 00:01:18.240
It is going to be glorious, or maybe not so much.

10
00:01:18.510 --> 00:01:21.450
Just give me a moment. And you'll see beyond that.

11
00:01:21.660 --> 00:01:25.860
When using this material point method, coupling problems frequently arise.

12
00:01:26.310 --> 00:01:29.640
This means that the sand is allowed to have an effect on the fluid,

13
00:01:29.910 --> 00:01:31.020
but at the same time,

14
00:01:31.290 --> 00:01:35.520
as the fluid sloshes around it also moves the sand particles within.

15
00:01:35.970 --> 00:01:40.860
This is what we refer to as two-way coupling. If it is implemented correctly,

16
00:01:41.190 --> 00:01:46.140
our simulated honey will behave as real honey in the footage here and support

17
00:01:46.200 --> 00:01:47.033
the deeper.

18
00:01:47.460 --> 00:01:51.810
These are also not trivial to compute with the material point method and require

19
00:01:51.840 --> 00:01:53.790
specialized extensions to do so.

20
00:01:54.420 --> 00:01:58.920
So what else is there to do this amazing new paper provides an

21
00:01:58.921 --> 00:02:02.400
extension to handle simulating elastic objects,

22
00:02:02.460 --> 00:02:04.260
such as hair rubber,

23
00:02:04.560 --> 00:02:09.300
and you will see that it even works for skin simulations and it can handle their

24
00:02:09.301 --> 00:02:13.950
interactions with other materials. So why is this useful?

25
00:02:14.640 --> 00:02:19.290
Well, we know that we can pull off simulating a bunch of particles and a jello

26
00:02:19.291 --> 00:02:23.970
simulation separately. So it's time for some experimentation.

27
00:02:24.480 --> 00:02:26.190
This is the one I promised earlier.

28
00:02:26.520 --> 00:02:30.600
So let's try to put these two things together and see what happens.

29
00:02:31.410 --> 00:02:33.300
It seems to start out, okay,

30
00:02:33.630 --> 00:02:37.920
particles are bouncing off of the jello and then, Oh,

31
00:02:38.430 --> 00:02:41.310
look, many of them seem to get stuck.

32
00:02:42.090 --> 00:02:45.000
So can we fix this somehow? Well,

33
00:02:45.090 --> 00:02:48.630
this is where this new paper comes into play. Look here.

34
00:02:49.050 --> 00:02:50.940
It starts out somewhat similarly.

35
00:02:51.180 --> 00:02:55.530
Most of the particles get pushed away from the jello and then look,

36
00:02:55.980 --> 00:02:58.920
some of them indeed keep bouncing for a long, long,

37
00:02:59.710 --> 00:03:03.430
and none of them are stuck to the jello glorious.

38
00:03:04.270 --> 00:03:07.930
We can see the same phenomenon here with three jello blocks of different

39
00:03:07.931 --> 00:03:09.940
stiffness values. With this,

40
00:03:09.970 --> 00:03:14.680
we can also simulate more than 10,000 bouncy hair strands and to the

41
00:03:14.681 --> 00:03:16.990
delight of a computer graphics researcher.

42
00:03:17.290 --> 00:03:21.610
We can even throw snow into it and expect it to behave correctly.

43
00:03:25.470 --> 00:03:26.303
Bates work well too.

44
00:03:30.000 --> 00:03:30.930
And if you remember,

45
00:03:30.990 --> 00:03:35.970
I also promised some skin simulation and this demonstration is not only super

46
00:03:35.971 --> 00:03:40.860
fun. For instance, the ones around this area are perhaps the most entertaining,

47
00:03:41.190 --> 00:03:46.050
but the information density of this screen is just absolutely amazing.

48
00:03:46.620 --> 00:03:48.240
As we go from bottom to top,

49
00:03:48.360 --> 00:03:52.560
you can see the effect of the stiffness parameters or in other words,

50
00:03:52.830 --> 00:03:57.540
the higher we are, the stiffer things become. And as we go from left to right,

51
00:03:57.750 --> 00:03:59.820
the effect of damping increases,

52
00:04:00.630 --> 00:04:04.500
and you can see not only a bunch of combinations of these two parameters,

53
00:04:04.830 --> 00:04:09.510
but you can also compare many configurations against each other at a glance

54
00:04:09.720 --> 00:04:11.940
on the same screen, loving it.

55
00:04:12.510 --> 00:04:16.200
So how long does it take to simulate all this? Well,

56
00:04:16.440 --> 00:04:19.440
given that we are talking about an offline simulation technique,

57
00:04:19.770 --> 00:04:22.650
this is not designed to run in real time games.

58
00:04:22.920 --> 00:04:26.940
As the execution time is typically not measured in frames per second,

59
00:04:27.150 --> 00:04:31.440
but seconds per frame, and sometimes even minutes or frame,

60
00:04:32.100 --> 00:04:32.790
however,

61
00:04:32.790 --> 00:04:36.540
having grand simulations that contained much fewer interactions than this,

62
00:04:36.690 --> 00:04:38.580
that took me several days to compute.

63
00:04:38.910 --> 00:04:43.320
I would argue that these numbers are quite appealing for a method of this class.

64
00:04:44.040 --> 00:04:48.210
Also note that this is one of those papers that makes the impossible possible

65
00:04:48.211 --> 00:04:51.240
for us. And of course, as we always say around here,

66
00:04:51.450 --> 00:04:56.070
two more papers down the line and it will be significantly improved for now.

67
00:04:56.220 --> 00:05:00.510
I am very impressed time to fire up some elaborate jello simulations.

68
00:05:00.840 --> 00:05:04.950
What a time to be alive. This episode has been supported by Lambda.

69
00:05:05.280 --> 00:05:07.170
If you're a researcher or a startup,

70
00:05:07.200 --> 00:05:10.200
looking for cheap GPU compute to run these algorithms,

71
00:05:10.440 --> 00:05:13.860
check out Lambda GPU cloud. I've talked about Lambdas,

72
00:05:13.890 --> 00:05:15.900
GPU workstations in other videos,

73
00:05:16.110 --> 00:05:20.190
and I'm happy to tell you that they are offering GPU cloud services as well.

74
00:05:20.490 --> 00:05:25.410
The Lambda GPU cloud can train image net to 93% accuracy for less

75
00:05:25.590 --> 00:05:30.270
than $19 Lambdas web-based IDE lets you easily access your

76
00:05:30.271 --> 00:05:31.950
instance right in your browser.

77
00:05:32.340 --> 00:05:37.050
And finally hold onto your papers because the Lambda GPU cloud costs less than

78
00:05:37.051 --> 00:05:39.420
half of AWS and Azure.

79
00:05:39.780 --> 00:05:44.370
Make sure to go to Lambda labs.com/papers and sign up for one of their

80
00:05:44.371 --> 00:05:46.200
amazing GPU instances today.

81
00:05:46.500 --> 00:05:49.680
Our thanks to Lambda for helping us make better videos for you.

82
00:05:50.040 --> 00:05:53.940
Thanks for watching and for your generous support. And I see you next time.

