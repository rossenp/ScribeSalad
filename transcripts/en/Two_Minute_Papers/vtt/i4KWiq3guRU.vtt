WEBVTT

1
00:00:00.060 --> 00:00:01.200
<v 0>Dear fellow scholars.</v>

2
00:00:01.470 --> 00:00:04.010
This is two minute papers with Dr. Károly Zsolnai-Fehér. With the nimble of

3
00:00:04.010 --> 00:00:04.010
 progress we are seeing in computer graphics research. It is now not only possible to perform beautiful fluid simulations, but we can also simulate more advanced effects such as honey coiling, ferrofluids climbing up on other objects and a variety of similar advanced effects. However, due to the complexity of these techniques, we often have to wait for several seconds or even minutes for every single one of these images, which often means that we have to leave our computer crunching 

4
00:00:04.010 --> 00:00:04.010
the

5
00:00:04.010 --> 00:00:04.010
 scenes overnight, or even wait several days for the results to appear. But what about 

6
00:00:04.010 --> 00:00:04.010
real-time

7
00:00:04.010 --> 00:00:04.843
 applications? Can we perform these fluid simulations in a more reasonable timeframe? Well, this technique offers detailed fluid simulations, like the one here and is blazing fast. The reason for this is that one, it uses a sparse volume representation and two, it supports parallel computation and runs on your graphics card.

8
00:01:08.010 --> 00:01:10.290
So what do these terms really mean?

9
00:01:10.860 --> 00:01:14.910
Let's start with a spar spot with classical fluid simulation techniques.

10
00:01:15.030 --> 00:01:19.980
The simulation domain has to be declared in advance and is typically confined

11
00:01:20.010 --> 00:01:24.570
to a cube. This comes with several disadvantages. For instance,

12
00:01:24.630 --> 00:01:28.950
if we wish to have a piece of fluid or smoke coming out of this cube,

13
00:01:29.220 --> 00:01:32.190
we are out of luck. The simulation domain stays.

14
00:01:32.430 --> 00:01:36.300
So we would have to know in advance how the simulation pans out,

15
00:01:36.660 --> 00:01:41.040
which we don't. Now the first thing you're probably thinking about,

16
00:01:41.250 --> 00:01:45.960
well, of course, make the simulation domain bigger. Yes,

17
00:01:46.170 --> 00:01:50.130
but unless special measures are taken the bigger the domain,

18
00:01:50.280 --> 00:01:54.480
the more we have to compute even the empty parts, take some computation.

19
00:01:55.170 --> 00:01:56.003
Ouch.

20
00:01:56.040 --> 00:02:00.300
This means that we have to confine the simulation to as smaller domain as we

21
00:02:00.301 --> 00:02:03.900
can. So this is where this technique comes into play.

22
00:02:04.170 --> 00:02:09.060
The sparse representation that it uses means that the simulation domain can take

23
00:02:09.120 --> 00:02:11.130
any form. As you see here,

24
00:02:11.460 --> 00:02:16.200
it just starts altering the shape of the simulation domain as the fluid splashes

25
00:02:16.260 --> 00:02:18.030
out of it. Furthermore,

26
00:02:18.090 --> 00:02:21.870
we are not only not doing work in the empty parts of the domain,

27
00:02:22.140 --> 00:02:24.210
which is a huge efficiency increase,

28
00:02:24.420 --> 00:02:28.050
but we don't need to allocate too much additional memory for these regions,

29
00:02:28.290 --> 00:02:32.910
which you will see in a minute will be a key part of the value proposition of

30
00:02:32.911 --> 00:02:33.744
this technique.

31
00:02:34.260 --> 00:02:39.060
We noted that it supports parallel computation and runs on your graphics

32
00:02:39.061 --> 00:02:39.894
card.

33
00:02:39.900 --> 00:02:44.640
The graphics card part is key because otherwise it would run on your processor.

34
00:02:44.910 --> 00:02:47.940
Like most of the techniques that require minutes per frame,

35
00:02:48.480 --> 00:02:53.010
the more complex the technique is typically the more likely that it runs on your

36
00:02:53.011 --> 00:02:57.420
processor, which has a few cores to the future tense. Of course,

37
00:02:58.530 --> 00:02:59.080
however,

38
00:02:59.080 --> 00:03:04.060
your graphics card comparatively is almost a supercomputer as it has up to a

39
00:03:04.061 --> 00:03:07.960
few hundred or even a few thousand cores to compute on.

40
00:03:08.500 --> 00:03:12.790
So why not use that? Well, it's not that simple.

41
00:03:13.120 --> 00:03:15.820
And here is where the word parallel is key.

42
00:03:16.210 --> 00:03:20.170
If the problem can be decomposed into smaller, independent problems,

43
00:03:20.380 --> 00:03:22.330
they can be allocated to many,

44
00:03:22.331 --> 00:03:26.800
many cores that can work independently and much more efficiently.

45
00:03:27.350 --> 00:03:30.910
This is exactly what this paper does with the fluid simulation.

46
00:03:31.270 --> 00:03:32.830
It runs it on your graphics card.

47
00:03:32.920 --> 00:03:37.600
And hence it is typically 10 to 20 times faster than the equivalent

48
00:03:37.601 --> 00:03:39.490
techniques running on your processor.

49
00:03:39.970 --> 00:03:44.080
Let me try to demonstrate this with an example. Let's talk about coffee.

50
00:03:44.560 --> 00:03:47.860
You see making coffee is not a very parallel task.

51
00:03:48.100 --> 00:03:52.540
If you ask a person to make coffee, it can typically be done in a few seconds.

52
00:03:53.050 --> 00:03:53.650
However,

53
00:03:53.650 --> 00:03:57.880
if you suddenly put 30 people in the kitchen and ask them to make coffee,

54
00:03:58.060 --> 00:04:00.610
it will not only not be a faster process,

55
00:04:01.150 --> 00:04:05.980
but may even be slower than one person because of two reasons. One,

56
00:04:06.160 --> 00:04:10.270
it is hard to coordinate 30 people and there will be miscommunication.

57
00:04:10.660 --> 00:04:14.410
And two, there are very few tools and lots of people,

58
00:04:14.530 --> 00:04:17.560
so they won't be able to help each other or much worse.

59
00:04:17.680 --> 00:04:21.970
We'll just hold each other up. If we could formulate the coffee, making problem,

60
00:04:22.030 --> 00:04:26.260
such that we need 30 units of coffee and we have 30 kitchens,

61
00:04:26.470 --> 00:04:31.090
we could just place one person into each kitchen and then they could work

62
00:04:31.120 --> 00:04:35.800
efficiently and independently at the risk of oversimplifying the

63
00:04:35.801 --> 00:04:39.490
situation. This is an intuition of what this technique does,

64
00:04:39.760 --> 00:04:44.470
and hence it runs on your graphics card and is incredibly fast.

65
00:04:45.040 --> 00:04:49.540
Also note that your graphics card typically has a limited amount of memory.

66
00:04:49.900 --> 00:04:54.580
And remember we noted that the sparse representation makes it very gentle on

67
00:04:54.581 --> 00:04:55.420
memory usage,

68
00:04:55.600 --> 00:05:00.220
making this the perfect algorithm for creating detailed large-scale fluid

69
00:05:00.221 --> 00:05:03.010
simulations quickly. Excellent design.

70
00:05:03.730 --> 00:05:07.840
I plan to post slow down versions of some of the footage that you see here to

71
00:05:07.841 --> 00:05:11.410
our Instagram page. If you feel that it is something you would enjoy,

72
00:05:11.620 --> 00:05:12.970
make sure to follow us there,

73
00:05:13.570 --> 00:05:16.300
just search for two minute papers on Instagram to find it,

74
00:05:16.570 --> 00:05:20.110
or also as always the link is in the video description.

75
00:05:20.710 --> 00:05:24.700
And finally hold onto your papers. Because if you look here,

76
00:05:25.030 --> 00:05:28.960
you see that the dam break scene can be simulated with about five frames per

77
00:05:28.961 --> 00:05:31.120
second, not seconds per frame.

78
00:05:31.450 --> 00:05:35.590
While the water drop scene can run about seven frames per second,

79
00:05:35.860 --> 00:05:39.490
with a few million particles, we can of course,

80
00:05:39.700 --> 00:05:44.410
scale up the simulation. And then we are back at seconds per frame land,

81
00:05:44.650 --> 00:05:48.160
but it is still blazing fast. If you look here,

82
00:05:48.220 --> 00:05:51.370
we can go up to 27 times faster.

83
00:05:51.760 --> 00:05:54.100
So in one all-nighter simulation,

84
00:05:54.370 --> 00:05:58.490
I can simulate what I could simulate in nearly a month. Sign me up,

85
00:05:59.240 --> 00:06:03.890
what a time to be alive. Now note that in the early days of two minute papers,

86
00:06:04.010 --> 00:06:06.080
about three, 400 episodes ago,

87
00:06:06.350 --> 00:06:10.190
I covered plenty of papers on fluid simulations. However,

88
00:06:10.280 --> 00:06:14.600
nearly no one really showed up to watch them before publishing any of these

89
00:06:14.601 --> 00:06:16.970
videos. I was like, here we go again.

90
00:06:17.270 --> 00:06:19.670
I knew that almost nobody would watch it,

91
00:06:19.970 --> 00:06:24.350
but this is a series where I set out to share the love for these papers.

92
00:06:24.770 --> 00:06:28.910
I believe we can learn a lot from these works and if no one watches them.

93
00:06:28.970 --> 00:06:31.280
So be it. I still love doing this,

94
00:06:31.850 --> 00:06:34.940
but I was surprised to find out that over the years,

95
00:06:35.120 --> 00:06:39.950
something has changed you fellow scholars somehow started to love the

96
00:06:39.951 --> 00:06:42.290
fluids. And I am delighted to see that.

97
00:06:42.710 --> 00:06:45.410
So thank you so much for trusting the process,

98
00:06:45.500 --> 00:06:47.570
showing up and watching these videos.

99
00:06:47.990 --> 00:06:51.530
I hope you're enjoying watching these as much as I enjoyed making them.

100
00:06:52.190 --> 00:06:56.000
This episode has been supported by weights and biases here.

101
00:06:56.060 --> 00:07:00.320
They show you how to make it to the top of Kaggle leaderboards by using weights

102
00:07:00.321 --> 00:07:04.310
and biases, to find the best model faster than everyone else,

103
00:07:04.820 --> 00:07:08.330
weights and biases provides tools to track your experiments in your deep

104
00:07:08.331 --> 00:07:12.680
learning project. Their system is designed to save you a ton of time and money,

105
00:07:12.890 --> 00:07:15.980
and it is actively used in projects at prestigious labs,

106
00:07:16.130 --> 00:07:20.150
such as open AI Toyota research GitHub and more.

107
00:07:20.510 --> 00:07:25.280
And the best part is that if you're an academic or have an open source project,

108
00:07:25.430 --> 00:07:29.780
you can use their tools for free. It really is as good as it gets.

109
00:07:30.110 --> 00:07:33.620
Make sure to visit them through wmb.com/papers,

110
00:07:33.830 --> 00:07:36.260
or just click the link in the video description.

111
00:07:36.500 --> 00:07:40.520
And you can get the freedom or today our thanks to weights and biases for their

112
00:07:41.090 --> 00:07:44.210
longstanding support and for helping us make better videos for you.

113
00:07:44.600 --> 00:07:48.560
Thanks for watching and for your generous support. And I'll see you next time.

